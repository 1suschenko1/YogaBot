from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.fsm.state import State, StatesGroup

from db import SessionLocal, User
from Ai import AI  # –¥–ª—è ¬´—Ç—Ä–µ–Ω–µ—Ä–∞¬ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

menu_router = Router()


# ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
def main_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í–∏–¥–µ–æ—É—Ä–æ–∫–∏ üé•"), KeyboardButton(text="–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏–π üßé‚Äç‚ôÄÔ∏è")],
            [KeyboardButton(text="–ú—É–∑—ã–∫–∞ üé∂"), KeyboardButton(text="–ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ —É —Ç—Ä–µ–Ω–µ—Ä–∞ üßò")],
            [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è")]
        ],
        resize_keyboard=True
    )


# ---------- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ----------


class MenuSettingsState(StatesGroup):
    settings = State()
    confirm_reset = State()
    change_name = State()
    change_age = State()
    change_sex = State()


class TrainerState(StatesGroup):
    question = State()


# ---------- –ö–æ–º–∞–Ω–¥–∞ /menu ----------
@menu_router.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext):
    db_session = SessionLocal()
    user = db_session.query(User).filter_by(tg_id=message.from_user.id).first()
    db_session.close()

    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())


# ---------- –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ —É —Ç—Ä–µ–Ω–µ—Ä–∞¬ª ----------
@menu_router.message(lambda msg: msg.text == "–ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ —É —Ç—Ä–µ–Ω–µ—Ä–∞ üßò")
async def ask_trainer_intro(message: types.Message, state: FSMContext):
    await message.answer(
        "–û —á—ë–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞?\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
        reply_markup=trainer_kb()
    )
    await state.set_state(TrainerState.question)


@menu_router.message(TrainerState.question)
async def handle_trainer_question(message: types.Message, state: FSMContext):
    if message.text.lower() == "–Ω–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())
        return

    ai = AI()
    try:
        answer = await ai.chat(message.text)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {str(e)}")
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())
        return

    await message.answer(answer)
    await message.answer(
        "–ß–µ–º —è –º–æ–≥—É –µ—â—ë –ø–æ–º–æ—á—å?\n(–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.)",
        reply_markup=trainer_kb()
    )


def trainer_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )